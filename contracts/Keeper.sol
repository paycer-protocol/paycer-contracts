// SPDX-License-Identifier: MIT
pragma solidity 0.6.12;

// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and
// ./interfaces/KeeperCompatibleInterface.sol
import "@chainlink/contracts/src/v0.6/KeeperCompatible.sol";
import "strategies/MultiStrategy.sol";

contract Counter is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public counter;

    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;
    MultiStrategy public strategy;

    constructor(uint updateInterval, MultiStrategy _strategy) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;
      strategy = _strategy;

      counter = 0;
    }

    function checkUpkeep(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performData */) {
        //upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.

        // TODO get supply rate from curve pool
        // https://polygonscan.com/address/0x8096ac61db23291252574D49f036f0f9ed8ab390
        upkeepNeeded = strategy.needsRebalance();
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        lastTimeStamp = block.timestamp;
        counter = counter + 1;
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function

        strategy.rebalance();
    }
}
