{
  "address": "0x5bf5b11053e734690269C6B9D438F8C9d48F528A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_compUSDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_COMP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_comptroller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Open",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousSwapManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSwapManager",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapManager",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beforeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convertFrom18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createKeeperList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isReservedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUpgradable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "contract IAddressListExt",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrateOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "setSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopEverything",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapManager",
      "outputs": [
        {
          "internalType": "contract ISwapManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweepErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapManager",
          "type": "address"
        }
      ],
      "name": "updateSwapManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5da90216d838977ebab5d8f9a4ef90e8df074a1574ed35a4d286d7c7af4e3a40",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5bf5b11053e734690269C6B9D438F8C9d48F528A",
    "transactionIndex": 0,
    "gasUsed": "3631019",
    "logsBloom": "0x
    "blockHash": "0x67a2664f75ed46af62ad677d47ccecf0f60df010a4b2a6363d05fba8ff24e649",
    "transactionHash": "0x5da90216d838977ebab5d8f9a4ef90e8df074a1574ed35a4d286d7c7af4e3a40",
    "logs": [],
    "blockNumber": 13958963,
    "cumulativeGasUsed": "3631019",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x276C216D241856199A83bf27b2286659e5b877D3",
    "0x3347B4d90ebe72BeFb30444C9966B2B990aE9FcB",
    "0x39AA39c021dfbaE8faC545936693aC917d5E7563",
    "0xc00e94Cb662C3520282E6f5717214004A7f26888",
    "0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B"
  ],
  "solcInputHash": "266d54f5da24701ace045fb957018aed",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compUSDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_COMP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Open\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSwapManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapManager\",\"type\":\"address\"}],\"name\":\"UpdatedSwapManager\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertFrom18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createKeeperList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpgradable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"contract IAddressListExt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"setSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEverything\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapManager\",\"outputs\":[{\"internalType\":\"contract ISwapManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweepErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapManager\",\"type\":\"address\"}],\"name\":\"updateSwapManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveToken()\":{\"details\":\"Approve all required tokens\"},\"convertFrom18(uint256)\":{\"details\":\"Convert from 18 decimals to token defined decimals. Default no conversion.\"},\"createKeeperList()\":{\"details\":\"Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor.\"},\"deposit(uint256)\":{\"details\":\"Deposit collateral token into lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}},\"interestEarned()\":{\"details\":\"Make sure to return value in collateral token\"},\"isUpgradable()\":{\"details\":\"If there are no cTokens in strategy then it is upgradable\"},\"migrateIn()\":{\"details\":\"For moving between versions of similar strategies\"},\"migrateOut()\":{\"details\":\"For moving between versions of similar strategies\"},\"rebalance()\":{\"details\":\"Calculate interest fee on earning from Compound and transfer fee to fee collector. Deposit available collateral from pool into Compound. Anyone can call it except when paused.\"},\"resetApproval()\":{\"details\":\"Reset approval of all required tokens\"},\"sweepErc20(address)\":{\"details\":\"sweep given token to vesper pool\",\"params\":{\"_fromToken\":\"token address to sweep\"}},\"token()\":{\"details\":\"Returns address of token correspond to collateral token\"},\"totalLocked()\":{\"details\":\"This value will be used in pool share calculation, so true totalLocked will be balance in Compound minus any pending fee to collect.\",\"returns\":{\"_0\":\"Return value will be in collateralToken defined decimal.\"}},\"updateSwapManager(address)\":{\"params\":{\"_swapManager\":\"swap manager address\"}},\"withdraw(uint256)\":{\"details\":\"Withdraw collateral token from lending pool.\",\"params\":{\"_amount\":\"Amount of collateral token\"}},\"withdrawAll()\":{\"details\":\"Withdraw all collateral. No rebalance earning. Controller only function, called when migrating strategy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"beforeWithdraw()\":{\"notice\":\"Vesper pools are using this function so it should exist in all strategies.\"},\"createKeeperList()\":{\"notice\":\"Create keeper list\"},\"depositAll()\":{\"notice\":\"Deposit all collateral token from pool to other lending pool. Anyone can call it except when paused.\"},\"interestEarned()\":{\"notice\":\"Returns interest earned in COMP since last rebalance.\"},\"isReservedToken(address)\":{\"notice\":\"This method is deprecated and will be removed from Strategies in next release\"},\"isUpgradable()\":{\"notice\":\"Returns true if strategy can be upgraded.\"},\"totalLocked()\":{\"notice\":\"Total collateral locked in Compound.\"},\"updateSwapManager(address)\":{\"notice\":\"Update swap manager address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/CompoundStrategyUSDC.sol\":\"CompoundStrategyUSDC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n */\\ncontract Pausable is Context {\\n    event Paused(address account);\\n    event Shutdown(address account);\\n    event Unpaused(address account);\\n    event Open(address account);\\n\\n    bool public paused;\\n    bool public stopEverything;\\n\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n    modifier whenPaused() {\\n        require(paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    modifier whenNotShutdown() {\\n        require(!stopEverything, \\\"Pausable: shutdown\\\");\\n        _;\\n    }\\n\\n    modifier whenShutdown() {\\n        require(stopEverything, \\\"Pausable: not shutdown\\\");\\n        _;\\n    }\\n\\n    /// @dev Pause contract operations, if contract is not paused.\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /// @dev Unpause contract operations, allow only if contract is paused and not shutdown.\\n    function _unpause() internal virtual whenPaused whenNotShutdown {\\n        paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /// @dev Shutdown contract operations, if not already shutdown.\\n    function _shutdown() internal virtual whenNotShutdown {\\n        stopEverything = true;\\n        paused = true;\\n        emit Shutdown(_msgSender());\\n    }\\n\\n    /// @dev Open contract operations, if contract is in shutdown state\\n    function _open() internal virtual whenShutdown {\\n        stopEverything = false;\\n        emit Open(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x000c693be655543f171076ff349e862756fa894f910721e2c87e08cce4354c55\",\"license\":\"MIT\"},\"contracts/interfaces/bloq/ISwapManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../uniswap/IUniswapV2Router02.sol\\\";\\n\\n/* solhint-disable func-name-mixedcase */\\n\\ninterface ISwapManager {\\n    event OracleCreated(address indexed _sender, address indexed _newOracle, uint256 _period);\\n\\n    function N_DEX() external view returns (uint256);\\n\\n    function ROUTERS(uint256 i) external view returns (IUniswapV2Router02);\\n\\n    function bestOutputFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountOut,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedInput(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function bestInputFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory path,\\n            uint256 amountIn,\\n            uint256 rIdx\\n        );\\n\\n    function bestPathFixedOutput(\\n        address _from,\\n        address _to,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function safeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsOut(\\n        uint256 _amountIn,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function safeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function unsafeGetAmountsIn(\\n        uint256 _amountOut,\\n        address[] memory _path,\\n        uint256 _i\\n    ) external view returns (uint256[] memory result);\\n\\n    function comparePathsFixedInput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountIn,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountOut);\\n\\n    function comparePathsFixedOutput(\\n        address[] memory pathA,\\n        address[] memory pathB,\\n        uint256 _amountOut,\\n        uint256 _i\\n    ) external view returns (address[] memory path, uint256 amountIn);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function oracleCount() external view returns (uint256);\\n\\n    function oracleAt(uint256 idx) external view returns (address);\\n\\n    function getOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function createOrUpdateOracle(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _period,\\n        uint256 _i\\n    ) external returns (address oracleAddr);\\n\\n    function consultForFree(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    ) external view returns (uint256 amountOut, uint256 lastUpdatedAt);\\n\\n    /// get the data we want and pay the gas to update\\n    function consult(\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        uint256 _period,\\n        uint256 _i\\n    )\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint256 lastUpdatedAt,\\n            bool updated\\n        );\\n\\n    function updateOracles() external returns (uint256 updated, uint256 expected);\\n\\n    function updateOracles(address[] memory _oracleAddrs)\\n        external\\n        returns (uint256 updated, uint256 expected);\\n}\\n\",\"keccak256\":\"0x7d7c7883945a820f79d73af04bded8629103c7adf9f9a6e8ec12908115628137\",\"license\":\"MIT\"},\"contracts/interfaces/compound/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface CToken is IERC20 {\\n    function accrueInterest() external returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function mint() external payable; // For ETH\\n\\n    function mint(uint256 mintAmount) external returns (uint256); // For ERC20\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n}\\n\\ninterface Comptroller {\\n    function claimComp(address holder, address[] memory) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaae0b171f49ef7dc48e86888dced20e5063d0f0311759ab13f8462c02f4179a4\",\"license\":\"MIT\"},\"contracts/interfaces/token/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface TokenLike {\\n    function approve(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x7db71c6ce85d33647359efb2ab9e948aad960c6d23e28afe677dae7779fd048b\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x796333072570a67a7ad356ee420a80edf7804268b6a31fcbe7836e3756a1916d\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe26d2ad5341fe167f03bdf9b4d74e1c69ae0980b08fbd83e7041026c5b961185\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IController {\\n    function aaveReferralCode() external view returns (uint16);\\n\\n    function feeCollector(address) external view returns (address);\\n\\n    function founderFee() external view returns (uint256);\\n\\n    function founderVault() external view returns (address);\\n\\n    function interestFee(address) external view returns (uint256);\\n\\n    function isPool(address) external view returns (bool);\\n\\n    function pools() external view returns (address);\\n\\n    function strategy(address) external view returns (address);\\n\\n    function rebalanceFriction(address) external view returns (uint256);\\n\\n    function poolRewards(address) external view returns (address);\\n\\n    function treasuryPool() external view returns (address);\\n\\n    function uniswapRouter() external view returns (address);\\n\\n    function withdrawFee(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4e0e894c9edd2e0f954e10c4432d91a76b45fc45d69c3bb5d1eb42fc7e815c3d\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n    function rebalance() external;\\n\\n    function deposit(uint256 amount) external;\\n\\n    function beforeWithdraw() external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function isUpgradable() external view returns (bool);\\n\\n    function isReservedToken(address _token) external view returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function totalLocked() external view returns (uint256);\\n\\n    //Lifecycle functions\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setSwapManager(address) external;\\n\\n    function setWETH(address) external;\\n}\\n\",\"keccak256\":\"0xc3a86f2aaa093deb46853a5b1cd7ab7642ec608585bf65fd875644dc273ca4e2\",\"license\":\"MIT\"},\"contracts/interfaces/vesper/IVesperPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVesperPool is IERC20 {\\n    function approveToken() external;\\n\\n    function deposit() external payable;\\n\\n    function deposit(uint256) external;\\n\\n    function multiTransfer(uint256[] memory) external returns (bool);\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external;\\n\\n    function rebalance() external;\\n\\n    function resetApproval() external;\\n\\n    function sweepErc20(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawETH(uint256) external;\\n\\n    function withdrawByStrategy(uint256) external;\\n\\n    function feeCollector() external view returns (address);\\n\\n    function getPricePerShare() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokensHere() external view returns (uint256);\\n\\n    function totalValue() external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7e6b4863520289099293550577c2423b425a5e6bc8ed35bd808ef3b8a90e5c4\",\"license\":\"MIT\"},\"contracts/strategies/CompoundStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Strategy.sol\\\";\\nimport \\\"../interfaces/compound/ICompound.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\n\\n/// @title This strategy will deposit collateral token in Compound and earn interest.\\nabstract contract CompoundStrategy is Strategy {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public pendingFee;\\n\\n    CToken internal immutable cToken;\\n    address internal immutable rewardToken;\\n    Comptroller internal immutable comptroller;\\n    uint256 internal exchangeRateStored;\\n\\n    constructor(\\n        address _controller,\\n        address _pool,\\n        address _receiptToken,\\n        address _rewardToken,\\n        address _comptroller\\n    ) public Strategy(_controller, _pool, _receiptToken) {\\n        require(_rewardToken != address(0), \\\"RewardToken address is zero\\\");\\n        cToken = CToken(_receiptToken);\\n        rewardToken = _rewardToken;\\n        comptroller = Comptroller(_comptroller);\\n    }\\n\\n    /// @notice Vesper pools are using this function so it should exist in all strategies.\\n    //solhint-disable-next-line no-empty-blocks\\n    function beforeWithdraw() external override onlyPool {}\\n\\n    /**\\n     * @dev Calculate interest fee on earning from Compound and transfer fee to fee collector.\\n     * Deposit available collateral from pool into Compound.\\n     * Anyone can call it except when paused.\\n     */\\n    function rebalance() external override onlyKeeper {\\n        _rebalanceEarned();\\n        uint256 balance = collateralToken.balanceOf(pool);\\n        if (balance != 0) {\\n            _deposit(balance);\\n        }\\n    }\\n\\n    /// @notice Returns true if strategy can be upgraded.\\n    /// @dev If there are no cTokens in strategy then it is upgradable\\n    function isUpgradable() external view override returns (bool) {\\n        return cToken.balanceOf(address(this)) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns interest earned in COMP since last rebalance.\\n     * @dev Make sure to return value in collateral token\\n     */\\n    function interestEarned() public view override returns (uint256 collateralEarned) {\\n        uint256 compAccrued = comptroller.compAccrued(address(this));\\n        if (compAccrued != 0) {\\n            (, collateralEarned, ) = swapManager.bestOutputFixedInput(\\n                rewardToken,\\n                address(collateralToken),\\n                compAccrued\\n            );\\n        }\\n    }\\n\\n    /// @notice This method is deprecated and will be removed from Strategies in next release\\n    function isReservedToken(address _token) public view override returns (bool) {\\n        return _token == address(cToken) || _token == rewardToken;\\n    }\\n\\n    /**\\n     * @notice Total collateral locked in Compound.\\n     * @dev This value will be used in pool share calculation, so true totalLocked\\n     * will be balance in Compound minus any pending fee to collect.\\n     * @return Return value will be in collateralToken defined decimal.\\n     */\\n    function totalLocked() public view override returns (uint256) {\\n        uint256 _totalCTokens = cToken.balanceOf(pool).add(cToken.balanceOf(address(this)));\\n        return _convertToCollateral(_totalCTokens).sub(_calculatePendingFee());\\n    }\\n\\n    function _approveToken(uint256 _amount) internal override {\\n        collateralToken.safeApprove(pool, _amount);\\n        collateralToken.safeApprove(address(cToken), _amount);\\n        for (uint256 i = 0; i < swapManager.N_DEX(); i++) {\\n            IERC20(rewardToken).safeApprove(address(swapManager.ROUTERS(i)), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Claim rewardToken and convert rewardToken into collateral token.\\n     * Calculate interest fee on earning from rewardToken and transfer balance minus\\n     * fee to pool.\\n     * @dev Transferring collateral to pool will increase pool share price.\\n     */\\n    function _claimReward() internal override {\\n        address[] memory markets = new address[](1);\\n        markets[0] = address(cToken);\\n        comptroller.claimComp(address(this), markets);\\n\\n        uint256 _rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n        if (_rewardAmount > 0) {\\n            _safeSwap(rewardToken, address(collateralToken), _rewardAmount);\\n            uint256 _collateralEarned = collateralToken.balanceOf(address(this));\\n            uint256 _fee = _collateralEarned.mul(controller.interestFee(pool)).div(1e18);\\n            collateralToken.safeTransfer(pool, _collateralEarned.sub(_fee));\\n        }\\n    }\\n\\n    function _deposit(uint256 _amount) internal virtual override {\\n        collateralToken.safeTransferFrom(pool, address(this), _amount);\\n        require(cToken.mint(_amount) == 0, \\\"deposit-failed\\\");\\n    }\\n\\n    /**\\n     * @notice Migrate tokens from pool to this address\\n     * @dev Any working Compound strategy has cTokens in strategy contract.\\n     * @dev There can be scenarios when pool already has cTokens and new\\n     * strategy will have to move those tokens from pool to self address.\\n     * @dev Only valid pool strategy is allowed to move tokens from pool.\\n     */\\n    function _migrateIn() internal override {\\n        require(controller.isPool(pool), \\\"not-a-valid-pool\\\");\\n        require(controller.strategy(pool) == address(this), \\\"not-a-valid-strategy\\\");\\n        IERC20(cToken).safeTransferFrom(pool, address(this), cToken.balanceOf(pool));\\n    }\\n\\n    /**\\n     * @notice Migrate tokens out to pool.\\n     * @dev There can be scenarios when we want to use new strategy without\\n     * calling withdrawAll(). We can achieve this by moving tokens in pool\\n     * and new strategy will take care from there.\\n     * @dev Pause this strategy, set pendingFee to zero and move tokens out.\\n     */\\n    function _migrateOut() internal override {\\n        require(controller.isPool(pool), \\\"not-a-valid-pool\\\");\\n        _pause();\\n        pendingFee = 0;\\n        IERC20(cToken).safeTransfer(pool, cToken.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Calculate interest fee earning and transfer it to fee collector.\\n     * RebalanceEarned completes in following steps,\\n     *      Claim rewardToken and earn fee.\\n     *      Update pending fee.\\n     *      Withdraw collateral equal to pendingFee from compound.\\n     *      Now we have collateral equal to pendingFee + fee earning from rewardToken.\\n     *      Deposit collateral in Pool and get shares.\\n     *      Transfer shares to feeCollector.\\n     */\\n    function _rebalanceEarned() internal {\\n        _claimReward();\\n        _updatePendingFee();\\n        // Read state variable once to save gas\\n        uint256 _pendingFee = pendingFee;\\n        uint256 _cTokenAmount = _convertToCToken(_pendingFee);\\n        if (_cTokenAmount != 0) {\\n            require(cToken.redeemUnderlying(_pendingFee) == 0, \\\"rebalanceEarned::withdraw-failed\\\");\\n            // Update state variable\\n            pendingFee = 0;\\n            _afterRedeem();\\n        }\\n        _handleFee(collateralToken.balanceOf(address(this)));\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        require(cToken.redeemUnderlying(_amount) == 0, \\\"withdraw-failed\\\");\\n        _afterRedeem();\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    function _withdrawAll() internal override {\\n        pendingFee = 0;\\n        require(cToken.redeem(cToken.balanceOf(address(this))) == 0, \\\"withdraw-all-failed\\\");\\n        _afterRedeem();\\n        collateralToken.safeTransfer(pool, collateralToken.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Hook to call after collateral is redeemed from Compound\\n    /// @notice We did empty implementation as not all derived are going to implement it.\\n    //solhint-disable-next-line no-empty-blocks\\n    function _afterRedeem() internal virtual {}\\n\\n    function _convertToCToken(uint256 _collateralAmount) internal view returns (uint256) {\\n        return _collateralAmount.mul(1e18).div(cToken.exchangeRateStored());\\n    }\\n\\n    function _convertToCollateral(uint256 _cTokenAmount) internal view returns (uint256) {\\n        return _cTokenAmount.mul(cToken.exchangeRateStored()).div(1e18);\\n    }\\n\\n    function _calculatePendingFee() internal view returns (uint256) {\\n        uint256 interest =\\n            cToken\\n                .exchangeRateStored()\\n                .sub(exchangeRateStored)\\n                .mul(cToken.balanceOf(address(this)))\\n                .div(1e18);\\n        uint256 fee = interest.mul(controller.interestFee(pool)).div(1e18);\\n        return pendingFee.add(fee);\\n    }\\n\\n    function _updatePendingFee() internal override {\\n        pendingFee = _calculatePendingFee();\\n        exchangeRateStored = cToken.exchangeRateStored();\\n    }\\n}\\n\",\"keccak256\":\"0x7bffd9964cc6154417c5ce668874a87c547d20a7f7c82d5369c64938630df82f\",\"license\":\"MIT\"},\"contracts/strategies/CompoundStrategyUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./CompoundStrategy.sol\\\";\\nimport \\\"../interfaces/token/IToken.sol\\\";\\n\\n//solhint-disable no-empty-blocks\\ncontract CompoundStrategyUSDC is CompoundStrategy {\\n    string public constant NAME = \\\"Strategy-Compound-USDC\\\";\\n    string public constant VERSION = \\\"2.0.2\\\";\\n\\n    constructor(\\n        address _controller,\\n        address _pool,\\n        address _compUSDC,\\n        address _COMP,\\n        address _comptroller\\n    )\\n        public\\n        CompoundStrategy(\\n            _controller,\\n            _pool,\\n            _compUSDC,\\n            _COMP,\\n            _comptroller\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0xebb7e597bb2bf1f5143d44a2035020743d2750ba38b62043ea73420ebb7fea31\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../Pausable.sol\\\";\\nimport \\\"../interfaces/bloq/ISwapManager.sol\\\";\\nimport \\\"../interfaces/vesper/IController.sol\\\";\\nimport \\\"../interfaces/vesper/IStrategy.sol\\\";\\nimport \\\"../interfaces/vesper/IVesperPool.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListExt.sol\\\";\\nimport \\\"../../sol-address-list/contracts/interfaces/IAddressListFactory.sol\\\";\\n\\nabstract contract Strategy is IStrategy, Pausable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // solhint-disable-next-line\\n    ISwapManager public swapManager = ISwapManager(0xe382d9f2394A359B01006faa8A1864b8a60d2710);\\n    IController public immutable controller;\\n    IERC20 public immutable collateralToken;\\n    address public immutable receiptToken;\\n    address public immutable override pool;\\n    IAddressListExt public keepers;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    uint256 internal constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    event UpdatedSwapManager(address indexed previousSwapManager, address indexed newSwapManager);\\n\\n    constructor(\\n        address _controller,\\n        address _pool,\\n        address _receiptToken\\n    ) public {\\n        require(_controller != address(0), \\\"controller-address-is-zero\\\");\\n        require(IController(_controller).isPool(_pool), \\\"not-a-valid-pool\\\");\\n        controller = IController(_controller);\\n        pool = _pool;\\n        collateralToken = IERC20(IVesperPool(_pool).token());\\n        receiptToken = _receiptToken;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            _msgSender() == address(controller) || _msgSender() == pool,\\n            \\\"caller-is-not-authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(_msgSender() == address(controller), \\\"caller-is-not-the-controller\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(keepers.contains(_msgSender()), \\\"caller-is-not-keeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPool() {\\n        require(_msgSender() == pool, \\\"caller-is-not-the-pool\\\");\\n        _;\\n    }\\n\\n    function pause() external override onlyController {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyController {\\n        _unpause();\\n    }\\n\\n    function setSwapManager(address _swapManager) external override onlyController {\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    function setWETH(address _weth) external override onlyController {\\n        WETH = _weth;\\n    }\\n\\n    /// @dev Approve all required tokens\\n    function approveToken() external onlyController {\\n        _approveToken(0);\\n        _approveToken(MAX_UINT_VALUE);\\n    }\\n\\n    /// @dev Reset approval of all required tokens\\n    function resetApproval() external onlyController {\\n        _approveToken(0);\\n    }\\n\\n    /**\\n     * @notice Create keeper list\\n     * @dev Create keeper list\\n     * NOTE: Any function with onlyKeeper modifier will not work until this function is called.\\n     * NOTE: Due to gas constraint this function cannot be called in constructor.\\n     */\\n    function createKeeperList() external onlyController {\\n        require(address(keepers) == address(0), \\\"keeper-list-already-created\\\");\\n        IAddressListFactory factory =\\n            IAddressListFactory(0xD57b41649f822C51a73C44Ba0B3da4A880aF0029);\\n        keepers = IAddressListExt(factory.createList());\\n        keepers.grantRole(keccak256(\\\"LIST_ADMIN\\\"), _msgSender());\\n    }\\n\\n    /**\\n     * @notice Update swap manager address\\n     * @param _swapManager swap manager address\\n     */\\n    function updateSwapManager(address _swapManager) external onlyController {\\n        require(_swapManager != address(0), \\\"sm-address-is-zero\\\");\\n        require(_swapManager != address(swapManager), \\\"sm-is-same\\\");\\n        emit UpdatedSwapManager(address(swapManager), _swapManager);\\n        swapManager = ISwapManager(_swapManager);\\n    }\\n\\n    /**\\n     * @dev Deposit collateral token into lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function deposit(uint256 _amount) public override onlyKeeper {\\n        _updatePendingFee();\\n        _deposit(_amount);\\n    }\\n\\n    /**\\n     * @notice Deposit all collateral token from pool to other lending pool.\\n     * Anyone can call it except when paused.\\n     */\\n    function depositAll() external virtual onlyKeeper {\\n        deposit(collateralToken.balanceOf(pool));\\n    }\\n\\n    /**\\n     * @dev Withdraw collateral token from lending pool.\\n     * @param _amount Amount of collateral token\\n     */\\n    function withdraw(uint256 _amount) external override onlyAuthorized {\\n        _updatePendingFee();\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw all collateral. No rebalance earning.\\n     * Controller only function, called when migrating strategy.\\n     */\\n    function withdrawAll() external override onlyController {\\n        _withdrawAll();\\n    }\\n\\n    /**\\n     * @dev sweep given token to vesper pool\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweepErc20(address _fromToken) external onlyKeeper {\\n        require(!isReservedToken(_fromToken), \\\"not-allowed-to-sweep\\\");\\n        if (_fromToken == ETH) {\\n            Address.sendValue(payable(pool), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(pool, _amount);\\n        }\\n    }\\n\\n    /// @dev Returns true if strategy can be upgraded.\\n    function isUpgradable() external view virtual override returns (bool) {\\n        return totalLocked() == 0;\\n    }\\n\\n    /// @dev Returns address of token correspond to collateral token\\n    function token() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    /// @dev Convert from 18 decimals to token defined decimals. Default no conversion.\\n    function convertFrom18(uint256 amount) public pure virtual returns (uint256) {\\n        return amount;\\n    }\\n\\n    /// @dev report the interest earned since last rebalance\\n    function interestEarned() external view virtual returns (uint256);\\n\\n    /// @dev Check whether given token is reserved or not. Reserved tokens are not allowed to sweep.\\n    function isReservedToken(address _token) public view virtual override returns (bool);\\n\\n    /// @dev Returns total collateral locked here\\n    function totalLocked() public view virtual override returns (uint256);\\n\\n    /// @dev For moving between versions of similar strategies\\n    function migrateIn() external onlyController {\\n        _migrateIn();\\n    }\\n\\n    /// @dev For moving between versions of similar strategies\\n    function migrateOut() external onlyController {\\n        _migrateOut();\\n    }\\n\\n    /**\\n     * @notice Handle earned interest fee\\n     * @dev Earned interest fee will go to the fee collector. We want fee to be in form of Vepseer\\n     * pool tokens not in collateral tokens so we will deposit fee in Vesper pool and send vTokens\\n     * to fee collactor.\\n     * @param _fee Earned interest fee in collateral token.\\n     */\\n    function _handleFee(uint256 _fee) internal virtual {\\n        if (_fee != 0) {\\n            IVesperPool(pool).deposit(_fee);\\n            uint256 _feeInVTokens = IERC20(pool).balanceOf(address(this));\\n            IERC20(pool).safeTransfer(controller.feeCollector(pool), _feeInVTokens);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe swap via Uniswap\\n     * @dev There are many scenarios when token swap via Uniswap can fail, so this\\n     * method will wrap Uniswap call in a 'try catch' to make it fail safe.\\n     * @param _from address of from token\\n     * @param _to address of to token\\n     * @param _amount Amount to be swapped\\n     */\\n    function _safeSwap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        (address[] memory _path, uint256 amountOut, uint256 rIdx) =\\n            swapManager.bestOutputFixedInput(_from, _to, _amount);\\n        if (amountOut != 0) {\\n            swapManager.ROUTERS(rIdx).swapExactTokensForTokens(\\n                _amount,\\n                1,\\n                _path,\\n                address(this),\\n                block.timestamp + 30\\n            );\\n        }\\n    }\\n\\n    function _deposit(uint256 _amount) internal virtual;\\n\\n    function _withdraw(uint256 _amount) internal virtual;\\n\\n    function _approveToken(uint256 _amount) internal virtual;\\n\\n    function _updatePendingFee() internal virtual;\\n\\n    function _withdrawAll() internal virtual;\\n\\n    function _migrateIn() internal virtual;\\n\\n    function _migrateOut() internal virtual;\\n\\n    function _claimReward() internal virtual;\\n}\\n\",\"keccak256\":\"0x3f73fe1893eff143c35f295ae4e3dc3456d7160a2b19ed3c26494d840959e0ad\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressList {\\n    event AddressUpdated(address indexed a, address indexed sender);\\n    event AddressRemoved(address indexed a, address indexed sender);\\n\\n    function add(address a) external returns (bool);\\n\\n    function addValue(address a, uint256 v) external returns (bool);\\n\\n    function addMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function addValueMulti(address[] calldata addrs, uint256[] calldata values) external returns (uint256);\\n\\n    function remove(address a) external returns (bool);\\n\\n    function removeMulti(address[] calldata addrs) external returns (uint256);\\n\\n    function get(address a) external view returns (uint256);\\n\\n    function contains(address a) external view returns (bool);\\n\\n    function at(uint256 index) external view returns (address, uint256);\\n\\n    function length() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa0565d70a23098bfc657a785ff308775bc858843be9bb45f75616d9cb03d43a1\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\nimport \\\"./IAddressList.sol\\\";\\n\\ninterface IAddressListExt is IAddressList {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x4433c06590d8a1b8559cda7f60e67d9ae621a99490bcbf1936c70afeabf954b5\",\"license\":\"MIT\"},\"sol-address-list/contracts/interfaces/IAddressListFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.6;\\n\\ninterface IAddressListFactory {\\n    event ListCreated(address indexed _sender, address indexed _newList);\\n\\n    function ours(address a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 idx) external view returns (address);\\n\\n    function createList() external returns (address listaddr);\\n}\\n\",\"keccak256\":\"0xd8a8c8f165891fada8711964a0de5d525b3ab62c37d6dde4108e90361bf4cc7c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526000805475e382d9f2394a359b01006faa8a1864b8a60d2710000062010000600160b01b0319909116179055600280546001600160a01b03191673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21790553480156200006457600080fd5b50604051620044de380380620044de833981810160405260a08110156200008a57600080fd5b5080516020820151604083015160608401516080909401519293919290919084848484848484846001600160a01b0383166200010d576040805162461bcd60e51b815260206004820152601a60248201527f636f6e74726f6c6c65722d616464726573732d69732d7a65726f000000000000604482015290519081900360640190fd5b826001600160a01b0316635b16ebb7836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156200015b57600080fd5b505afa15801562000170573d6000803e3d6000fd5b505050506040513d60208110156200018757600080fd5b5051620001ce576040805162461bcd60e51b815260206004820152601060248201526f1b9bdd0b584b5d985b1a590b5c1bdbdb60821b604482015290519081900360640190fd5b6001600160601b0319606084811b821660805283901b1660e05260408051637e062a3560e11b815290516001600160a01b0384169163fc0c546a916004808301926020929190829003018186803b1580156200022957600080fd5b505afa1580156200023e573d6000803e3d6000fd5b505050506040513d60208110156200025557600080fd5b50516001600160601b0319606091821b811660a05291901b1660c05250506001600160a01b038216620002cf576040805162461bcd60e51b815260206004820152601b60248201527f526577617264546f6b656e2061646472657373206973207a65726f0000000000604482015290519081900360640190fd5b6001600160601b0319606093841b81166101005291831b82166101205290911b16610140525050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c613fef620004ef6000398061070f52806132395250806107ca5280610a715280611f7c528061330852806133ac525080610a365280610c725280610d175280610df05280611b655280611bef5280611e4a528061212452806121dd528061235a5280612436528061261d52806127b25280612bdc5280612c9d5280612e155280612e9152806131eb528061359e5250806104cb528061053152806109a75280610dc65280611060528061162b52806116e152806118085280611cde5280611df652806122a152806125f5528061290e52806129cb5280612ad25280612bba5280612c0b5280612cf65280612deb52806134a55280613537528061363b52806136bb528061376a528061381a525080611aab5250806107f25280611031528061135c52806117d95280611af65280611cff5280611da05280611dd45280611e28528061252a52806125d3528061292f52806133cd52806133f6528061356a5250806104ef52806105d3528061068552806109245280610abb5280610e8f52806110fb528061117e528061121052806112d9528061138052806118975280611acf5280612272528061299c5280612aa35280612cc752806134e7528061379b5250613fef6000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c80638456cb591161012a578063b6b55f25116100bd578063ec78e8321161008c578063fb589de211610071578063fb589de21461049c578063fc0c546a146104b9578063ffa1ad74146104c157610226565b8063ec78e8321461048c578063f77c47911461049457610226565b8063b6b55f2514610439578063d9fe3eae14610456578063de5f62681461047c578063ea7c85021461048457610226565b8063a3f4df7e116100f9578063a3f4df7e146103a4578063b000c32814610421578063b2016bd414610429578063b3fc176c1461043157610226565b80638456cb5914610384578063853828b61461038c578063951dc22c1461039457806399b71d5c1461039c57610226565b80634938649a116101bd5780635b769f3c1161018c578063643090bc11610171578063643090bc1461036c578063709d039d146103745780637d7c2a1c1461037c57610226565b80635b769f3c1461033e5780635c975abb1461036457610226565b80634938649a146103005780634c36fad7146103085780635479d9401461032e578063568914121461033657610226565b8063374261ab116101f9578063374261ab1461029c5780633f4ba83a146102b6578063419f7753146102be578063440d7248146102c657610226565b806316f0115b1461022b5780632e1a7d4d1461024f57806330284efc1461026e578063330b8b7114610294575b600080fd5b6102336104c9565b604080516001600160a01b039092168252519081900360200190f35b61026c6004803603602081101561026557600080fd5b50356104ed565b005b61026c6004803603602081101561028457600080fd5b50356001600160a01b03166105d1565b61026c610683565b6102a461070a565b60408051918252519081900360200190f35b61026c610922565b61026c6109a5565b6102ec600480360360208110156102dc57600080fd5b50356001600160a01b0316610a32565b604080519115158252519081900360200190f35b6102ec610aab565b61026c6004803603602081101561031e57600080fd5b50356001600160a01b0316610ab9565b6102ec610c6e565b6102a4610d0f565b61026c6004803603602081101561035457600080fd5b50356001600160a01b0316610e8d565b6102ec610f37565b6102a4610f40565b610233610f46565b61026c610f5b565b61026c6110f9565b61026c61117c565b6102336111ff565b61026c61120e565b6103ac61129e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103e65781810151838201526020016103ce565b50505050905090810190601f1680156104135780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61026c6112d7565b61023361135a565b61026c61137e565b61026c6004803603602081101561044f57600080fd5b5035611401565b61026c6004803603602081101561046c57600080fd5b50356001600160a01b03166114dc565b61026c61170a565b61026c611895565b610233611aa9565b610233611acd565b6102a4600480360360208110156104b257600080fd5b5035611af1565b610233611af4565b6103ac611b18565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661051f611b51565b6001600160a01b0316148061056c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610561611b51565b6001600160a01b0316145b6105bd576040805162461bcd60e51b815260206004820152601860248201527f63616c6c65722d69732d6e6f742d617574686f72697a65640000000000000000604482015290519081900360640190fd5b6105c5611b55565b6105ce81611bed565b50565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610603611b51565b6001600160a01b03161461064c576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b600080546001600160a01b03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106b5611b51565b6001600160a01b0316146106fe576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6107086000611dc7565b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cc7ebdc4306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d60208110156107a457600080fd5b50519050801561091e576000805460408051631d1f307960e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690529151620100009093049091169263e8f983c892606480840193829003018186803b15801561084c57600080fd5b505afa158015610860573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561088957600080fd5b81019080805160405193929190846401000000008211156108a957600080fd5b9083019060208201858111156108be57600080fd5b82518660208202830111640100000000821117156108db57600080fd5b82525081516020918201928201910280838360005b838110156109085781810151838201526020016108f0565b5050505091909101604052506020015194505050505b5090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610954611b51565b6001600160a01b03161461099d576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b610708611fab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109d7611b51565b6001600160a01b031614610708576040805162461bcd60e51b815260206004820152601660248201527f63616c6c65722d69732d6e6f742d7468652d706f6f6c00000000000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161480610aa557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b92915050565b600054610100900460ff1681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aeb611b51565b6001600160a01b031614610b34576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6001600160a01b038116610b8f576040805162461bcd60e51b815260206004820152601260248201527f736d2d616464726573732d69732d7a65726f0000000000000000000000000000604482015290519081900360640190fd5b6000546001600160a01b0382811662010000909204161415610bf8576040805162461bcd60e51b815260206004820152600a60248201527f736d2d69732d73616d6500000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516936201000090930416917f2d19927e7cac08ceb98b38898a4fdff6da6a27295b9a2d62fe250408ebe044e191a3600080546001600160a01b03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cdd57600080fd5b505afa158015610cf1573d6000803e3d6000fd5b505050506040513d6020811015610d0757600080fd5b505115905090565b600080610e6b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d6020811015610dac57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291517f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d6020811015610e6357600080fd5b5051906120af565b9050610e87610e78612110565b610e8183612347565b906123b1565b91505090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ebf611b51565b6001600160a01b031614610f08576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60005460ff1681565b60035481565b6000546201000090046001600160a01b031681565b6001546001600160a01b0316635dbe47e8610f74611b51565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610fb157600080fd5b505afa158015610fc5573d6000803e3d6000fd5b505050506040513d6020811015610fdb57600080fd5b5051611025576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b61102d61240e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d60208110156110e657600080fd5b5051905080156105ce576105ce816125c6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661112b611b51565b6001600160a01b031614611174576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6107086126ff565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111ae611b51565b6001600160a01b0316146111f7576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b61070861278d565b6001546001600160a01b031681565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611240611b51565b6001600160a01b031614611289576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6112936000611dc7565b610708600019611dc7565b6040518060400160405280601681526020017f53747261746567792d436f6d706f756e642d555344430000000000000000000081525081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611309611b51565b6001600160a01b031614611352576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b61070861299a565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113b0611b51565b6001600160a01b0316146113f9576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b610708612cc5565b6001546001600160a01b0316635dbe47e861141a611b51565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561145757600080fd5b505afa15801561146b573d6000803e3d6000fd5b505050506040513d602081101561148157600080fd5b50516114cb576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b6114d3611b55565b6105ce816125c6565b6001546001600160a01b0316635dbe47e86114f5611b51565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561153257600080fd5b505afa158015611546573d6000803e3d6000fd5b505050506040513d602081101561155c57600080fd5b50516115a6576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b6115af81610a32565b15611601576040805162461bcd60e51b815260206004820152601460248201527f6e6f742d616c6c6f7765642d746f2d7377656570000000000000000000000000604482015290519081900360640190fd5b6001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611655576116507f000000000000000000000000000000000000000000000000000000000000000047612eb8565b6105ce565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156116a457600080fd5b505afa1580156116b8573d6000803e3d6000fd5b505050506040513d60208110156116ce57600080fd5b505190506117066001600160a01b0383167f000000000000000000000000000000000000000000000000000000000000000083612fa2565b5050565b6001546001600160a01b0316635dbe47e8611723611b51565b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561176057600080fd5b505afa158015611774573d6000803e3d6000fd5b505050506040513d602081101561178a57600080fd5b50516117d4576040805162461bcd60e51b815260206004820152601460248201527331b0b63632b916b4b996b737ba16b5b2b2b832b960611b604482015290519081900360640190fd5b6107087f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561186457600080fd5b505afa158015611878573d6000803e3d6000fd5b505050506040513d602081101561188e57600080fd5b5051611401565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166118c7611b51565b6001600160a01b031614611910576040805162461bcd60e51b815260206004820152601c6024820152600080516020613f64833981519152604482015290519081900360640190fd5b6001546001600160a01b03161561196e576040805162461bcd60e51b815260206004820152601b60248201527f6b65657065722d6c6973742d616c72656164792d637265617465640000000000604482015290519081900360640190fd5b600073d57b41649f822c51a73c44ba0b3da4a880af00299050806001600160a01b0316630fab4d256040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119c257600080fd5b505af11580156119d6573d6000803e3d6000fd5b505050506040513d60208110156119ec57600080fd5b50516001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03928316179081905516632f2ff15d7f679f35d3aa86a98333c7fc7439a0bc12a13be742ae62a4c1cc3820782a2e11a6611a48611b51565b6040518363ffffffff1660e01b815260040180838152602001826001600160a01b0316815260200192505050600060405180830381600087803b158015611a8e57600080fd5b505af1158015611aa2573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b90565b7f000000000000000000000000000000000000000000000000000000000000000090565b6040518060400160405280600581526020017f322e302e3200000000000000000000000000000000000000000000000000000081525081565b3390565b611b5d612110565b6003819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbc57600080fd5b505afa158015611bd0573d6000803e3d6000fd5b505050506040513d6020811015611be657600080fd5b5051600455565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663852a12e3826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611c5357600080fd5b505af1158015611c67573d6000803e3d6000fd5b505050506040513d6020811015611c7d57600080fd5b505115611cd1576040805162461bcd60e51b815260206004820152600f60248201527f77697468647261772d6661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b611cd9610708565b6105ce7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d6a57600080fd5b505afa158015611d7e573d6000803e3d6000fd5b505050506040513d6020811015611d9457600080fd5b50516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fa2565b611e1b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612ff4565b611e6f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083612ff4565b60005b600060029054906101000a90046001600160a01b03166001600160a01b031663c2fba6676040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec057600080fd5b505afa158015611ed4573d6000803e3d6000fd5b505050506040513d6020811015611eea57600080fd5b50518110156117065760005460408051636e74a6f760e01b8152600481018490529051611fa3926201000090046001600160a01b031691636e74a6f7916024808301926020929190829003018186803b158015611f4657600080fd5b505afa158015611f5a573d6000803e3d6000fd5b505050506040513d6020811015611f7057600080fd5b50516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169084612ff4565b600101611e72565b60005460ff16612002576040805162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b600054610100900460ff161561205f576040805162461bcd60e51b815260206004820152601260248201527f5061757361626c653a2073687574646f776e0000000000000000000000000000604482015290519081900360640190fd5b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612092611b51565b604080516001600160a01b039092168252519081900360200190a1565b600082820183811015612109576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60008061225d670de0b6b3a76400006122577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561218f57600080fd5b505afa1580156121a3573d6000803e3d6000fd5b505050506040513d60208110156121b957600080fd5b5051600480546040805163182df0f560e01b81529051612251936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263182df0f59281830192602092829003018186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d602081101561224957600080fd5b5051906123b1565b90613107565b90613160565b90506000612330670de0b6b3a76400006122577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634564a6c87f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156122fd57600080fd5b505afa158015612311573d6000803e3d6000fd5b505050506040513d602081101561232757600080fd5b50518590613107565b60035490915061234090826120af565b9250505090565b6000610aa5670de0b6b3a76400006122577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156122fd57600080fd5b600082821115612408576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6124166131c7565b61241e611b55565b600354600061242c82613597565b90508015612525577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561249a57600080fd5b505af11580156124ae573d6000803e3d6000fd5b505050506040513d60208110156124c457600080fd5b505115612518576040805162461bcd60e51b815260206004820181905260248201527f726562616c616e63654561726e65643a3a77697468647261772d6661696c6564604482015290519081900360640190fd5b6000600355612525610708565b6117067f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561259557600080fd5b505afa1580156125a9573d6000803e3d6000fd5b505050506040513d60208110156125bf57600080fd5b5051613633565b61261b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f00000000000000000000000000000000000000000000000000000000000000003084613841565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561268157600080fd5b505af1158015612695573d6000803e3d6000fd5b505050506040513d60208110156126ab57600080fd5b5051156105ce576040805162461bcd60e51b815260206004820152600e60248201527f6465706f7369742d6661696c6564000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff1615612757576040805162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612092611b51565b6000600355604080516370a0823160e01b815230600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163db006a759183916370a08231916024808301926020929190829003018186803b15801561280057600080fd5b505afa158015612814573d6000803e3d6000fd5b505050506040513d602081101561282a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092525160248083019260209291908290030181600087803b15801561288357600080fd5b505af1158015612897573d6000803e3d6000fd5b505050506040513d60208110156128ad57600080fd5b505115612901576040805162461bcd60e51b815260206004820152601360248201527f77697468647261772d616c6c2d6661696c656400000000000000000000000000604482015290519081900360640190fd5b612909610708565b6107087f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d6a57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb77f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612a2757600080fd5b505afa158015612a3b573d6000803e3d6000fd5b505050506040513d6020811015612a5157600080fd5b5051612a97576040805162461bcd60e51b815260206004820152601060248201526f1b9bdd0b584b5d985b1a590b5c1bdbdb60821b604482015290519081900360640190fd5b306001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663228bfd9f7f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b2e57600080fd5b505afa158015612b42573d6000803e3d6000fd5b505050506040513d6020811015612b5857600080fd5b50516001600160a01b031614612bb5576040805162461bcd60e51b815260206004820152601460248201527f6e6f742d612d76616c69642d7374726174656779000000000000000000000000604482015290519081900360640190fd5b6107087f0000000000000000000000000000000000000000000000000000000000000000307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612c6757600080fd5b505afa158015612c7b573d6000803e3d6000fd5b505050506040513d6020811015612c9157600080fd5b50516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929190613841565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb77f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612d5257600080fd5b505afa158015612d66573d6000803e3d6000fd5b505050506040513d6020811015612d7c57600080fd5b5051612dc2576040805162461bcd60e51b815260206004820152601060248201526f1b9bdd0b584b5d985b1a590b5c1bdbdb60821b604482015290519081900360640190fd5b612dca6126ff565b6000600355604080516370a0823160e01b81523060048201529051610708917f0000000000000000000000000000000000000000000000000000000000000000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015612e5b57600080fd5b505afa158015612e6f573d6000803e3d6000fd5b505050506040513d6020811015612e8557600080fd5b50516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fa2565b80471015612f0d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612f58576040519150601f19603f3d011682016040523d82523d6000602084013e612f5d565b606091505b5050905080612f9d5760405162461bcd60e51b815260040180806020018281038252603a815260200180613eb9603a913960400191505060405180910390fd5b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612f9d908490613897565b80158061307a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561304c57600080fd5b505afa158015613060573d6000803e3d6000fd5b505050506040513d602081101561307657600080fd5b5051155b6130b55760405162461bcd60e51b8152600401808060200182810382526036815260200180613f846036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612f9d908490613897565b60008261311657506000610aa5565b8282028284828161312357fe5b04146121095760405162461bcd60e51b8152600401808060200182810382526021815260200180613f196021913960400191505060405180910390fd5b60008082116131b6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816131bf57fe5b049392505050565b604080516001808252818301909252606091602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061321757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631c3db2e030836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156132c65781810151838201526020016132ae565b505050509050019350505050600060405180830381600087803b1580156132ec57600080fd5b505af1158015613300573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561337357600080fd5b505afa158015613387573d6000803e3d6000fd5b505050506040513d602081101561339d57600080fd5b505190508015611706576133f27f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083613948565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561346157600080fd5b505afa158015613475573d6000803e3d6000fd5b505050506040513d602081101561348b57600080fd5b5051604080516308ac94d960e31b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152915192935060009261353092670de0b6b3a764000092612257927f000000000000000000000000000000000000000000000000000000000000000090921691634564a6c891602480820192602092909190829003018186803b1580156122fd57600080fd5b90506135917f000000000000000000000000000000000000000000000000000000000000000061356084846123b1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612fa2565b50505050565b6000610aa57f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156135f557600080fd5b505afa158015613609573d6000803e3d6000fd5b505050506040513d602081101561361f57600080fd5b505161225784670de0b6b3a7640000613107565b80156105ce577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b6b55f25826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561369f57600080fd5b505af11580156136b3573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561372657600080fd5b505afa15801561373a573d6000803e3d6000fd5b505050506040513d602081101561375057600080fd5b50516040805163503700dd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529151929350611706927f00000000000000000000000000000000000000000000000000000000000000009092169163a06e01ba91602480820192602092909190829003018186803b1580156137e457600080fd5b505afa1580156137f8573d6000803e3d6000fd5b505050506040513d602081101561380e57600080fd5b50516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169083612fa2565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526135919085905b60606138ec826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c9b9092919063ffffffff16565b805190915015612f9d5780806020019051602081101561390b57600080fd5b5051612f9d5760405162461bcd60e51b815260040180806020018281038252602a815260200180613f3a602a913960400191505060405180910390fd5b6000805460408051631d1f307960e31b81526001600160a01b038781166004830152868116602483015260448201869052915160609493849362010000909104169163e8f983c89160648083019286929190829003018186803b1580156139ae57600080fd5b505afa1580156139c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260608110156139eb57600080fd5b8101908080516040519392919084640100000000821115613a0b57600080fd5b908301906020820185811115613a2057600080fd5b8251866020820283011164010000000082111715613a3d57600080fd5b82525081516020918201928201910280838360005b83811015613a6a578181015183820152602001613a52565b5050505091909101604090815260208301519201519497509095509293505083159150613c93905057600060029054906101000a90046001600160a01b03166001600160a01b0316636e74a6f7826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613aec57600080fd5b505afa158015613b00573d6000803e3d6000fd5b505050506040513d6020811015613b1657600080fd5b50516040516338ed173960e01b8152600481018681526001602483018190523060648401819052601e42016084850181905260a060448601908152895160a487015289516001600160a01b03909716966338ed1739968c968c9594939092909160c401906020878101910280838360005b83811015613b9f578181015183820152602001613b87565b505050509050019650505050505050600060405180830381600087803b158015613bc857600080fd5b505af1158015613bdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613c0557600080fd5b8101908080516040519392919084640100000000821115613c2557600080fd5b908301906020820185811115613c3a57600080fd5b8251866020820283011164010000000082111715613c5757600080fd5b82525081516020918201928201910280838360005b83811015613c84578181015183820152602001613c6c565b50505050905001604052505050505b505050505050565b6060613caa8484600085613cb2565b949350505050565b606082471015613cf35760405162461bcd60e51b8152600401808060200182810382526026815260200180613ef36026913960400191505060405180910390fd5b613cfc85613e0e565b613d4d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310613d8c5780518252601f199092019160209182019101613d6d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613dee576040519150601f19603f3d011682016040523d82523d6000602084013e613df3565b606091505b5091509150613e03828286613e14565b979650505050505050565b3b151590565b60608315613e23575081612109565b825115613e335782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613e7d578181015183820152602001613e65565b50505050905090810190601f168015613eaa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656463616c6c65722d69732d6e6f742d7468652d636f6e74726f6c6c6572000000005361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220fb5c6ca51d4aac9cbfd7b703c7dee6394b57ea18800ce9e384cc3c03e63b630264736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveToken()": {
        "details": "Approve all required tokens"
      },
      "convertFrom18(uint256)": {
        "details": "Convert from 18 decimals to token defined decimals. Default no conversion."
      },
      "createKeeperList()": {
        "details": "Create keeper list NOTE: Any function with onlyKeeper modifier will not work until this function is called. NOTE: Due to gas constraint this function cannot be called in constructor."
      },
      "deposit(uint256)": {
        "details": "Deposit collateral token into lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      },
      "interestEarned()": {
        "details": "Make sure to return value in collateral token"
      },
      "isUpgradable()": {
        "details": "If there are no cTokens in strategy then it is upgradable"
      },
      "migrateIn()": {
        "details": "For moving between versions of similar strategies"
      },
      "migrateOut()": {
        "details": "For moving between versions of similar strategies"
      },
      "rebalance()": {
        "details": "Calculate interest fee on earning from Compound and transfer fee to fee collector. Deposit available collateral from pool into Compound. Anyone can call it except when paused."
      },
      "resetApproval()": {
        "details": "Reset approval of all required tokens"
      },
      "sweepErc20(address)": {
        "details": "sweep given token to vesper pool",
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "token()": {
        "details": "Returns address of token correspond to collateral token"
      },
      "totalLocked()": {
        "details": "This value will be used in pool share calculation, so true totalLocked will be balance in Compound minus any pending fee to collect.",
        "returns": {
          "_0": "Return value will be in collateralToken defined decimal."
        }
      },
      "updateSwapManager(address)": {
        "params": {
          "_swapManager": "swap manager address"
        }
      },
      "withdraw(uint256)": {
        "details": "Withdraw collateral token from lending pool.",
        "params": {
          "_amount": "Amount of collateral token"
        }
      },
      "withdrawAll()": {
        "details": "Withdraw all collateral. No rebalance earning. Controller only function, called when migrating strategy."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "beforeWithdraw()": {
        "notice": "Vesper pools are using this function so it should exist in all strategies."
      },
      "createKeeperList()": {
        "notice": "Create keeper list"
      },
      "depositAll()": {
        "notice": "Deposit all collateral token from pool to other lending pool. Anyone can call it except when paused."
      },
      "interestEarned()": {
        "notice": "Returns interest earned in COMP since last rebalance."
      },
      "isReservedToken(address)": {
        "notice": "This method is deprecated and will be removed from Strategies in next release"
      },
      "isUpgradable()": {
        "notice": "Returns true if strategy can be upgraded."
      },
      "totalLocked()": {
        "notice": "Total collateral locked in Compound."
      },
      "updateSwapManager(address)": {
        "notice": "Update swap manager address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4325,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4327,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "stopEverything",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17087,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "swapManager",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISwapManager)5045"
      },
      {
        "astId": 17098,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "keepers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAddressListExt)21932"
      },
      {
        "astId": 17104,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "WETH",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12754,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "pendingFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 12762,
        "contract": "contracts/strategies/CompoundStrategyUSDC.sol:CompoundStrategyUSDC",
        "label": "exchangeRateStored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressListExt)21932": {
        "encoding": "inplace",
        "label": "contract IAddressListExt",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapManager)5045": {
        "encoding": "inplace",
        "label": "contract ISwapManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}